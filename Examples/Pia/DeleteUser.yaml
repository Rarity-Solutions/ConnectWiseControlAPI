# Delete ScreenConnect User

conditions: 
- name: 'client_filter' 
  optMode: 'OptOut'
  category: 'Rarity Solutions'
  tags: 'Agents'

- name: 'chat'
  option_button: 'ScreenConnect'
  option_text: 'Delete User'
  option_category: 'Rarity Solutions'

steps:
# Capture Start Time
- task: inline_powershell
  alias: 'captureStartTime'
  inputs:
    script: |
      $startTime = [DateTime]::UtcNow
      Write-Host "Script start time: $($startTime.ToString('yyyy-MM-ddTHH:mm:ssZ'))"
      return @{ startTime = $startTime }

# Step 1: Get Available Users
- task: inline_powershell
  alias: 'getAvailableUsers'
  inputs:
    urlValue: $i_screenconnect_api_base_url_1
    adminUser: $i_screenconnect_username_1
    adminPass: $i_screenconnect_password_1
    otpSecret: $i_screenconnect_otp_1
    script: |
      try {
          Write-Host "Starting ScreenConnect operations..."
          Write-Host "Server: $urlValue"

          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

          $adminCred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $adminUser, (ConvertTo-SecureString -String $adminPass -AsPlainText -Force)

          # Install and import API Module
          $documentsPath = [Environment]::GetFolderPath('MyDocuments')
          $url = 'https://github.com/Rarity-Solutions/ConnectWiseControlAPI/archive/refs/heads/main.zip'
          $moduleName = 'ConnectWiseControlAPI'
          $modulePath = Join-Path $documentsPath 'WindowsPowerShell\Modules'
          $tempPath = Join-Path $env:TEMP ($moduleName + '.zip')
          
          Invoke-WebRequest -Uri $url -OutFile $tempPath
          $tempDir = '.' + $moduleName + '_temp'
          $extractPath = Join-Path $HOME $tempDir
          Expand-Archive -Path $tempPath -DestinationPath $extractPath -Force
          $sourceFolder = Join-Path $extractPath ('ConnectWiseControlAPI-main/' + $moduleName)
          $destinationFolder = Join-Path $modulePath $moduleName
          
          if (!(Test-Path $destinationFolder)) {
              New-Item -Path $destinationFolder -ItemType Directory | Out-Null
          }
          
          Copy-Item -Path "$sourceFolder\*" -Destination $destinationFolder -Recurse -Force
          Remove-Item $tempPath, $extractPath -Recurse -Force

          Import-Module $moduleName -Force
          Connect-CWC -Server $urlValue -Credentials $adminCred -Secret (ConvertTo-SecureString -String $otpSecret -AsPlainText -Force)

          # Get users
          $Security = Get-CWCSecurityConfigurationInfo
          $InternalUsers = $Security.UserSources | Where-Object { $_.Users.Count -gt 0 } | Select-Object -First 1

          if (-not $InternalUsers -or $InternalUsers.Users.Count -eq 0) {
              return @{ 
                  success = $false; 
                  error = "No users found.";
                  formDef = $(ConvertTo-Json -Compress @{ item = @() })
              }
          }

          $formDefProps = @{
              item = @($InternalUsers.Users | ForEach-Object {
                  @{
                      text = "$($_.Name) ($($_.Email))"
                      value = $_.Email
                  }
              })
          }
          
          $formDefJson = ConvertTo-Json -Compress $formDefProps
          return @{ 
              success = $true; 
              formDef = $formDefJson;
              users = $InternalUsers.Users 
          }
      }
      catch {
          Write-Error "Error getting user list: $_"
          return @{ 
              success = $false; 
              error = "Failed to get user list: $_";
              formDef = $(ConvertTo-Json -Compress @{ item = @() })
          }
      }

# Step 2: Select User to Delete
- task: chat_interaction
  alias: 'selectUser'
  skip: '{=!getAvailableUsers.success}'
  inputs:
    text: 'Select the user to delete:'
    form_name: 'form_select_one'
    form_display_mode: 'Embed'
    form_def: =getAvailableUsers.formDef

# Step 3: Retrieve Notes for Selected User
- task: inline_powershell
  alias: 'retrieveNotes'
  skip: '{=!selectUser.success}'
  inputs:
    selectedEmail: =selectUser.form.item
    urlValue: $i_screenconnect_api_base_url_1
    adminUser: $i_screenconnect_username_1
    adminPass: $i_screenconnect_password_1
    otpSecret: $i_screenconnect_otp_1
    script: |
      try {
          Write-Host "Starting note retrieval for email: $selectedEmail"
          
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

          $adminCred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $adminUser, (ConvertTo-SecureString -String $adminPass -AsPlainText -Force)
          
          Import-Module ConnectWiseControlAPI -Force
          Connect-CWC -Server $urlValue -Credentials $adminCred -Secret (ConvertTo-SecureString -String $otpSecret -AsPlainText -Force)
          
          # Get all sessions
          $sessions = Get-CWCSession -Type 'Access' | Sort-Object Name
          
          if ($sessions.Count -eq 0) {
              return @{ 
                  success = $true;
                  message = "No computers found in ScreenConnect";
                  noteCount = 0
              }
          }

          # Array to store matching notes
          $matchingNotes = @()

          # Iterate through each session and its notes
          foreach ($session in $sessions) {
              if ($session.AddedNoteEvents) {
                  foreach ($note in $session.AddedNoteEvents) {
                      # Check if the note contains the email
                      if ($note.Data -match $selectedEmail) {
                          $matchingNotes += @{
                              SessionName = $session.Name
                              EventID = $note.EventID
                              Note = $note.Data
                          }
                      }
                  }
              }
          }

          if ($matchingNotes.Count -gt 0) {
              $notesList = $matchingNotes | ForEach-Object {
                  "Computer: $($_.SessionName)`nEvent ID: $($_.EventID)`nNote: $($_.Note)`n-----------------------------------"
              }
              return @{ 
                  success = $true;
                  message = "Found $($matchingNotes.Count) note(s) for email: $selectedEmail`n`n" + ($notesList -join "`n");
                  noteCount = $matchingNotes.Count
              }
          } else {
              return @{ 
                  success = $true;
                  message = "No notes found for email: $selectedEmail";
                  noteCount = 0
              }
          }
      }
      catch {
          Write-Error "Error retrieving notes: $_"
          return @{ 
              success = $false;
              error = "Failed to retrieve notes: $_"
          }
      }

# Step 4: Display Retrieved Notes
- task: chat_interaction
  alias: 'displayNotes'
  skip: '{=!retrieveNotes.success}'
  inputs:
    text: 'Notes found for user before deletion:\n\n{=retrieveNotes.message}'
    form_display_mode: 'Embed'

# Step 5: Confirm Deletion
- task: inline_powershell
  alias: 'prepareConfirmation'
  skip: '{=!retrieveNotes.success}'
  inputs:
    script: |
      $confirmOptions = @{
          item = @(
              @{
                  text = "Yes, permanently delete this user"
                  value = "confirm"
              }
          )
      }
      return @{ 
          success = $true;
          formDef = $(ConvertTo-Json -Compress $confirmOptions)
      }

- task: chat_interaction
  alias: 'confirmDeletion'
  skip: '{=!prepareConfirmation.success}'
  inputs:
    text: 'WARNING: This action cannot be undone. Confirm deletion:'
    form_name: 'form_select_one'
    form_display_mode: 'Embed'
    form_def: =prepareConfirmation.formDef

# Step 6: Delete User
- task: inline_powershell
  alias: 'deleteUser'
  skip: '{=!confirmDeletion.success || confirmDeletion.form.item -ne "confirm"}'
  inputs:
    selectedEmail: =selectUser.form.item
    urlValue: $i_screenconnect_api_base_url_1
    adminUser: $i_screenconnect_username_1
    adminPass: $i_screenconnect_password_1
    otpSecret: $i_screenconnect_otp_1
    script: |
      try {
          Write-Host "Starting user deletion..."
          
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

          $adminCred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $adminUser, (ConvertTo-SecureString -String $adminPass -AsPlainText -Force)
          
          Import-Module ConnectWiseControlAPI -Force
          Connect-CWC -Server $urlValue -Credentials $adminCred -Secret (ConvertTo-SecureString -String $otpSecret -AsPlainText -Force)
          
          # Get user details before deletion
          $Security = Get-CWCSecurityConfigurationInfo
          $user = $Security.UserSources.Users | Where-Object { $_.Email -eq $selectedEmail } | Select-Object -First 1
          
          # Delete user
          Write-Host "Deleting user..."
          Remove-CWCUser -User $selectedEmail
          
          return @{ 
              success = $true; 
              message = "User deleted successfully: $($user.Name) ($($user.Email))`n`nNOTE: Please review the retrieved notes and ensure all documented permissions are manually revoked from their respective systems.";
              userName = $user.Name;
              userEmail = $user.Email
          }
      }
      catch {
          Write-Error "Error in deleting user: $_"
          return @{ 
              success = $false; 
              error = "Failed to delete user: $_"
          }
      }

# Display Results
- task: chat_interaction
  alias: 'displayResults'
  inputs:
    text: =deleteUser.message
    form_display_mode: 'Embed'

# Add an audit log message
- task: system_audit_note
  inputs:
    Content: |
      ScreenConnect User Deletion Results:
      User Email: {=selectUser.form.item}
      Retrieved Notes Count: {=retrieveNotes.noteCount}
      
      ⚠️ IMPORTANT: While the user account has been removed, any permission entries documented in the notes below must be manually revoked from their respective systems. Please review these notes carefully and ensure all associated permissions are properly removed.
      
      Notes Content:
      {=retrieveNotes.message}
      
      Deletion Status: {=deleteUser.message}

# Create time entry
- task: inline_powershell
  alias: 'get_cw_member_by_email'
  inputs:
    CW_Api_Url: $CW_Api_Url
    CW_Api_Token: $CW_Api_Token
    CW_Api_Client_Id: $CW_Api_Client_Id
    email: $Pia_Chat_User_Email
    script: |
      Function GetMemberByEmail($email)
      {
          $url = "$CW_Api_Url/apis/3.0/system/members?conditions=primaryEmail='$email'"
          Write-Host "Requesting URL: $url"

          $request = [System.Net.HttpWebRequest]::Create($url)
          $request.Method = "GET"
          $request.ContentType = "application/json"
          $authBytes = [System.Text.Encoding]::UTF8.GetBytes($CW_Api_Token)
          $request.Headers["Authorization"] = "Basic " + [Convert]::ToBase64String($authBytes)
          $request.Headers["clientId"] = $CW_Api_Client_Id

          try {
              $response = $request.GetResponse()
              $reader = New-Object System.IO.StreamReader($response.GetResponseStream())
              $jsonResult = $reader.ReadToEnd()
              $response.Dispose()
              return (ConvertFrom-Json $jsonResult)
          }
          catch {
              Write-Error "Error in GetMemberByEmail: $_"
              return $null
          }
      }

      $memberObj = GetMemberByEmail -email $email | Select-Object -First 1
      if ($null -eq $memberObj) {
          Write-Error "Failed to retrieve member."
          return @{ success = $false; error = "Failed to retrieve member." }
      }
      return @{ success = $true; MemberId = $memberObj.Id }

# Task to create the time log entry
- task: inline_powershell
  alias: 'create_time_log'
  inputs:
    CW_Api_Url: $CW_Api_Url
    CW_Api_Token: $CW_Api_Token
    CW_Api_Client_Id: $CW_Api_Client_Id
    ticketId: $Ctx_Ticket_Id
    memberId: =get_cw_member_by_email.MemberId
    startTime: =captureStartTime.startTime
    script: |
      Function CreateTimeLog($timeLogData)
      {
          $url = "$CW_Api_Url/apis/3.0/time/entries"
          Write-Host "Creating time log at URL: $url"
  
          $request = [System.Net.HttpWebRequest]::Create($url)
          $request.Method = "POST"
          $request.ContentType = "application/json"
          $authBytes = [System.Text.Encoding]::UTF8.GetBytes($CW_Api_Token)
          $request.Headers["Authorization"] = "Basic " + [Convert]::ToBase64String($authBytes)
          $request.Headers["clientId"] = $CW_Api_Client_Id
          
          $body = ConvertTo-Json -InputObject $timeLogData -Depth 5
          Write-Host "Request body: $body"

          try {
              $requestWriter = New-Object System.IO.StreamWriter $request.GetRequestStream()
              $requestWriter.Write($body)
              $requestWriter.Flush()
              $requestWriter.Close()

              $response = $request.GetResponse()
              $reader = New-Object System.IO.StreamReader($response.GetResponseStream())
              $result = $reader.ReadToEnd()
              $response.Dispose()
              Write-Host "Time log result: $result"
              return @{ success = $true; result = $result }
          }
          catch [System.Net.WebException] {
              $respStream = $_.Exception.Response.GetResponseStream()
              $reader = New-Object System.IO.StreamReader($respStream)
              $errorMsg = $reader.ReadToEnd()
              Write-Error "Failed to create time log: $errorMsg"
              return @{ success = $false; error = "Failed to create time log: $errorMsg" }
          }
      }

      try {
          Write-Host "Start time received: $startTime"
          
          if ($startTime -is [DateTime]) {
              $timeStart = $startTime
          } elseif ($startTime -is [string]) {
              $timeStart = [DateTime]::Parse($startTime, [System.Globalization.CultureInfo]::InvariantCulture, [System.Globalization.DateTimeStyles]::AdjustToUniversal)
          } else {
              throw "Invalid start time type: $($startTime.GetType())"
          }
          
          Write-Host "Parsed start time: $timeStart"
          
          $timeEnd = [DateTime]::UtcNow
          $timeDiff = $timeEnd - $timeStart
          
          if ($timeDiff.TotalMinutes -lt 1) {
              $timeEnd = $timeStart.AddMinutes(1)
          }

          $timeDiff = $timeEnd - $timeStart
          $timeDiffMinutes = [math]::Ceiling($timeDiff.TotalMinutes)

          Write-Host "Time difference in minutes (rounded up): $timeDiffMinutes minutes."

          $timeLogData = @{
              member = @{ id = [int]$memberId }
              chargeToId = [int]$ticketId
              timeStart = $timeStart.ToString("yyyy-MM-ddTHH:mm:ssZ")
              timeEnd = $timeEnd.ToString("yyyy-MM-ddTHH:mm:ssZ")
              notes = "Time spent on ScreenConnect user deletion. Total time: $timeDiffMinutes minutes."
              billableOption = "Billable"
              workType = @{ name = "Remote Help Desk" }
              workRole = @{ name = "Technician" }
              chargeToType = "ServiceTicket"
          }

          $result = CreateTimeLog -timeLogData $timeLogData
          if ($result.success) {
              return @{ success = $true; result = $result.result; timeDiffMinutes = $timeDiffMinutes }
          } else {
              return @{ success = $false; error = $result.error; timeDiffMinutes = $timeDiffMinutes }
          }
      }
      catch {
          Write-Error "Error in create_time_log: $_"
          return @{ success = $false; error = "Error in create_time_log: $_"; timeDiffMinutes = 0 }
      }

# Add an audit log message about the time entry
- task: system_audit_note
  inputs:
    Content: |
      Time entry logged: {=create_time_log.timeDiffMinutes} minutes.